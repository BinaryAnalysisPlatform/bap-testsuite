# A library of common utilities used across
# different tool tests

proc setup-logs {test {n ""} } {
    global logfile
    set test [regsub -all {\ } $test {-}]
    if { $n != ""} {
        set ::env(BAP_BACKLOG) $n
    }
    set logdir "logs/$test"
    set ::env(BAP_LOG_DIR) $logdir
    set logfile "$logdir/log"
}

proc string-matched {str pattern} {
    return [regexp -inline -all -- $pattern $str]
}

proc cat {file} {
    set fd [open "$file"]
    set output [read $fd]
    close $fd
    return $output
}

proc collect-matching {file pattern} {
    set output [cat $file.out]
    return [string-matched $output $pattern]
}

# escape all non-word characters
# the & will be substituted by whatever was matched in the expression
proc escape {str} {
    return [regsub -all {\W} $str {\\&}]
}

# `run_command cmd opts` runs the command `cmd` with the options `opts`
# and returns the output from stderr and stdout. Writes to log file
# for the tested tool the command as it was invocated and the output.
proc run_command {cmd opts} {
    set result "$cmd-result"
    send_log "$cmd $opts\n"
    catch {eval exec $cmd $opts >& $result}
    if { [file exists $result] == 1 } {
        set ret [cat $result]
        send_log $ret
        exec rm -f $result
        return $ret
    } else {
        send_log "No output for $cmd $opts"
        return ""
    }
}

# `match_output cmd opts expectations level` matches the output
# of the provided command (both stderr and stdout) called with the
# options `opts`. The `expectations` is a list of patterns
# and actions associated with these patterns. The action will be
# called once the corresponding pattern is matched. Patterns and actions
# are evaluated in the context of calling site. The call site
# can be hinted with `level` parameter. The procedure works
# until the first matching found. If no matches found,
# the action associated with the `default` pattern is called.
proc match_output { cmd opts expectations {provided_level ""} } {
    set result  [run_command $cmd $opts]
    if {$provided_level == ""} {
        set callee_level [expr [info level] - 1 ]
    } else {
        set callee_level $provided_level
    }
    set level [expr [info level] - $callee_level]
    set matched false
    foreach {pat act} $expectations {
        set pat [join [uplevel $level list $pat]]
        if {$pat == "default"} {
            continue
        } else {
            set got [string-matched $result $pat]
            set matches [llength $got]
            if { $matches != 0} {
                set matched true
                uplevel $level $act
                break
            }
        }
    }
    if {$matched == false} {
        foreach {pat act} $expectations {
            if {$pat == "default"} {
                uplevel $level $act
            }
        }
    }
}


# `match_until cmd opts test patterns` subsequently applies each
# pattern from the `patterns` list to the output of the command
# `cmd` invocated with options `opts`. Stops on the first pattern
# that doesn't match. Every next pattern starts from the next
# character after the previos pattern match occured.
proc match_until {cmd opts test patterns} {
    set result [run_command $cmd $opts]
    set start 0

    foreach {pat} $patterns {
        set indexes [regexp -start $start -indices -inline -- $pat $result]
        set indexes [split [lindex $indexes 0]]
        if {[llength $indexes] == 0} {
            fail "$test for $pat"
            break
        } else {
            pass "$test for $pat"
        }
        set start [lindex $indexes 0]
        #increment start to make sure we don't match
        #the same substring again
        set start [incr $start]
    }
}

proc match_patterns {str patterns escaped} {
    set matched {}
    set not_matched {}
    foreach {pat test} $patterns {
        if { $escaped == true } {
            set pat [escape $pat]
        }
        set got [string-matched $str $pat]
        if { [llength $got] != 0} {
            lappend matched $test
        } else {
            lappend not_matched $test
        }
    }
    return [subst {{$matched} {$not_matched}}]
}

proc display_result {passed failed} {
    foreach p $passed { pass "$p" }
    foreach p $failed { fail "$p" }
}

# `match_all cmd opts patterns bad_patterns escaped`
# matches the output of the command `cmd` invocated with
# the options `opts` with every pattern from `patterns`
# and `bad_patterns` lists. Every match with a pattern
# from `patterns` list is considered as a passed test and
# every mismatch as a failed one. And vice versa for the
# `bad_patterns` - every match is considered as a failed test
# and every mismatch as a passed one. Each pattern
# in the `patterns` and `bad_patterns` lists must be followed
# by the test name which will be used as an argument to the
# `pass`/`fail` functions, i.e. for display purposes.
proc match_all {cmd opts patterns {bad_patterns {} } {escaped false}}  {
    set result [run_command $cmd $opts]

    set match_result [match_patterns $result $patterns $escaped]
    display_result [lindex $match_result 0] [lindex $match_result 1]

    set match_result [match_patterns $result $bad_patterns $escaped]
    display_result [lindex $match_result 1] [lindex $match_result 0]
}

# `find_all_strings cmd opts strings testname` ensures that all the strings
# can be found in the result of the invocation `cmd` with the options
# `opts`.
proc find_all_strings {cmd opts strings test } {
    set strs {}
    foreach str $strings {
        lappend strs $str
        lappend strs "$test for $str"
    }
    match_all $cmd $opts $strs {} true
}
